<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itwill.rest.repository.SongDao">

	<select id="detailBySongId" resultType="SongDetail">
         SELECT
            s.song_id,
            s.title AS song_title,
            a.album_id,
            a.album_name AS album_name,
            a.album_image AS album_image,
            singer.singer_name,
            singer.singer_ids,
            writer.writers,
            writer.writer_ids,
            composer.composers,
            composer.composer_ids,
            arranger.arrangers,
            arranger.arranger_ids,
            LISTAGG(gc.genre_name, ', ') WITHIN GROUP (ORDER BY gc.genre_name) AS genre,
            s.lyrics
            FROM
            songs s
            JOIN albums a ON s.album_id = a.album_id
            LEFT JOIN (
                SELECT
                ar.song_id,
                LISTAGG(art.artist_name, ', ') WITHIN GROUP (ORDER BY art.artist_name) AS singer_name,
                LISTAGG(art.artist_id, ', ') WITHIN GROUP (ORDER BY art.artist_name) AS singer_ids
                FROM
                artist_roles ar
                JOIN artists art ON ar.artist_id = art.artist_id
                WHERE
                ar.role_id = 10
                GROUP BY
                ar.song_id
            ) singer ON s.song_id = singer.song_id
            LEFT JOIN (
                SELECT
                ar.song_id,
                LISTAGG(art.artist_name, ', ') WITHIN GROUP (ORDER BY art.artist_name) AS writers,
                LISTAGG(art.artist_id, ', ') WITHIN GROUP (ORDER BY art.artist_name) AS writer_ids
                FROM
                artist_roles ar
                JOIN artists art ON ar.artist_id = art.artist_id
                WHERE
                ar.role_id = 30
                GROUP BY
                ar.song_id
            ) writer ON s.song_id = writer.song_id
            LEFT JOIN (
                SELECT
                ar.song_id,
                LISTAGG(art.artist_name, ', ') WITHIN GROUP (ORDER BY art.artist_name) AS composers,
                LISTAGG(art.artist_id, ', ') WITHIN GROUP (ORDER BY art.artist_name) AS composer_ids
                FROM
                artist_roles ar
                JOIN artists art ON ar.artist_id = art.artist_id
                WHERE
                ar.role_id = 20
                GROUP BY
                ar.song_id
            ) composer ON s.song_id = composer.song_id
            LEFT JOIN (
                SELECT
                ar.song_id,
                LISTAGG(art.artist_name, ', ') WITHIN GROUP (ORDER BY art.artist_name) AS arrangers,
                LISTAGG(art.artist_id, ', ') WITHIN GROUP (ORDER BY art.artist_name) AS arranger_ids
                FROM
                artist_roles ar
                JOIN artists art ON ar.artist_id = art.artist_id
                WHERE
                ar.role_id = 40
                GROUP BY
                ar.song_id
            ) arranger ON s.song_id = arranger.song_id
            LEFT JOIN song_genre sg ON s.song_id = sg.song_id
            LEFT JOIN genre_code gc ON sg.genre_id = gc.genre_id
            WHERE
            s.song_id = #{id}
            GROUP BY
            s.song_id, s.title, a.album_id, a.album_name, a.album_image, s.lyrics, 
            singer.singer_name, singer.singer_ids, 
            writer.writers, writer.writer_ids,
            composer.composers, composer.composer_ids, 
            arranger.arrangers, arranger.arranger_ids
    </select>
  
    <select id="isLikes" resultType="integer">
        select count(*) from likes where song_id = #{songId} and id = #{loginUserId}
    </select>
    
    <insert id="addLike">
        insert into likes (song_id, id) values (#{songId}, #{loginUserId})
    </insert>
    
    <delete id="removeLike">
        delete from likes where song_id = #{songId} and id = #{loginUserId}
    </delete>
    
   <select id="searchSongs" resultType="ResultDto">
    <bind name="searchKeyword" value="'%' + keyword + '%'" />
        SELECT * FROM (
          SELECT songId, albumName, albumImage, title, singerName, releaseDate, score, rnum, album_id, artist_ids
          FROM (
            SELECT s.song_id AS songId,
                   a.album_name AS albumName,
                   a.album_image AS albumImage,
                   s.title AS title,
                   LISTAGG(DISTINCT art.artist_name, ', ') WITHIN GROUP (ORDER BY art.artist_name) AS singerName,
                   a.album_release_date AS releaseDate,
                   MAX(SCORE(1)) AS score,
                   ROW_NUMBER() OVER (
                     <choose>
                       <when test='sortType.equals("accuracy")'>
                         ORDER BY MAX(SCORE(1)) DESC
                       </when>
                       <when test='sortType.equals("recency")'>
                         ORDER BY a.album_release_date DESC
                       </when>
                       <when test='sortType.equals("alphabet")'>
                         ORDER BY s.title ASC
                       </when>
                     </choose>
                   ) AS rnum,
                   s.album_id AS album_id,
                   LISTAGG(DISTINCT art.artist_id, ', ') WITHIN GROUP (ORDER BY art.artist_name) AS artist_ids
            FROM songs s
            JOIN albums a ON s.album_id = a.album_id
            JOIN artist_roles ar ON s.song_id = ar.song_id AND ar.role_id = 10
            JOIN artists art ON ar.artist_id = art.artist_id
            WHERE 1=1
            <choose>
              <when test='category.equals("t")'>
                AND CONTAINS(s.title, #{searchKeyword}, 1) > 0
              </when>
              <when test='category.equals("s")'>
                   AND (CONTAINS(s.title, '㉾', 1) > 0
                OR s.song_id IN (
                  SELECT DISTINCT ar2.song_id
                  FROM artist_roles ar2
                  JOIN artists art2 ON ar2.artist_id = art2.artist_id
                  WHERE ar2.role_id = 10
                  AND CONTAINS(art2.artist_name, #{searchKeyword}, 1) > 0
                ))
              </when>
              <when test='category.equals("ts")'>   
                AND (CONTAINS(s.title, #{searchKeyword}, 1) > 0
                OR s.song_id IN (
                  SELECT DISTINCT ar2.song_id
                  FROM artist_roles ar2
                  JOIN artists art2 ON ar2.artist_id = art2.artist_id
                  WHERE ar2.role_id = 10
                  AND CONTAINS(art2.artist_name, #{searchKeyword}, 1) > 0
                ))
              </when>
              <when test='category.equals("a")'>
                AND CONTAINS(a.album_name, #{searchKeyword}, 1) > 0
              </when>
            </choose>
            GROUP BY s.song_id, a.album_name, a.album_image, s.title, a.album_release_date, s.album_id
          )
          WHERE ROWNUM &lt;= #{endRow}
        )
        WHERE rnum >= #{startRow}
    </select>
        
    <!-- 좋아요 개수 확인 -->
    <select id="countSongLikes" resultType="Integer">
        select count(*)
        from likes
        where song_id = #{songId}
    </select>
    
    <!-- TOP30 -->
    <select id="getAllSongs" resultType="SongChartDto">
        WITH unique_artists AS (
            SELECT
                s.song_id,
                LISTAGG(distinct ar.artist_id, ', ') WITHIN GROUP (ORDER BY ar.artist_name) AS artist_id,
                LISTAGG(DISTINCT ar.artist_name, ', ') WITHIN GROUP (ORDER BY ar.artist_name) AS artist_name
            FROM songs s
            JOIN artist_roles role ON s.song_id = role.song_id
            JOIN artists ar ON role.artist_id = ar.artist_id
            WHERE role.role_id = (SELECT role_id FROM role_code WHERE role_name = '가수')
            GROUP BY s.song_id
        )
        SELECT
            s.song_id,
            al.album_id,
            al.album_image,
            s.title,
            ua.artist_id AS artist_id,
            ua.artist_name AS artist_name,
            al.album_name,
            COUNT(l.song_id) AS likes,
            s.song_path,
            s.video_link
        FROM songs s
        JOIN albums al ON s.album_id = al.album_id
        JOIN unique_artists ua ON s.song_id = ua.song_id
        LEFT JOIN likes l ON s.song_id = l.song_id
        GROUP BY
            s.song_id,
            al.album_id,
            al.album_image,
            s.title,
            ua.artist_id,
            ua.artist_name,
            al.album_name,
            s.song_path,
            s.video_link
        ORDER BY COUNT(l.song_id) DESC
    </select>

    <!-- 장르별 차트 -->
    <select id="getSongsByGenre" resultType="SongChartDto">
        WITH unique_artists AS (
            SELECT
                so.song_id,
                LISTAGG(DISTINCT ar.artist_id, ', ') WITHIN GROUP (ORDER BY ar.artist_name) AS artist_id,
                LISTAGG(DISTINCT ar.artist_name, ', ') WITHIN GROUP (ORDER BY ar.artist_name) AS artist_name
            FROM songs so
            JOIN artist_roles role ON so.song_id = role.song_id
            JOIN artists ar ON role.artist_id = ar.artist_id
            JOIN song_genre sg ON so.song_id = sg.song_id
            WHERE sg.genre_id = (SELECT genre_id FROM genre_code WHERE genre_name = #{genreName})
            AND role.role_id = (SELECT role_id FROM role_code WHERE role_name = '가수')
            GROUP BY so.song_id
        )
        SELECT
            so.song_id,
            gc.genre_name,
            al.album_id,
            al.album_image,
            so.title,
            ua.artist_id AS artist_id,
            ua.artist_name AS artist_name,
            al.album_name,
            COUNT(l.song_id) AS likes,
            so.song_path,
            so.video_link
        FROM songs so
        JOIN albums al ON so.album_id = al.album_id
        JOIN song_genre sg ON so.song_id = sg.song_id
        JOIN genre_code gc ON sg.genre_id = gc.genre_id
        JOIN unique_artists ua ON so.song_id = ua.song_id
        LEFT JOIN likes l ON so.song_id = l.song_id
        GROUP BY
            so.song_id,
            gc.genre_name,
            al.album_id,
            al.album_image,
            so.title,
            ua.artist_id,
            ua.artist_name,
            al.album_name,
            so.song_path,
            so.video_link
        ORDER BY COUNT(l.song_id) DESC
    </select>
      
    <!-- 최신 음악 -->
    <select id="getNewestSongs" resultType="SongChartDto">
        WITH unique_artists AS (
            SELECT
                s.song_id,
                LISTAGG(distinct ar.artist_id, ', ') WITHIN GROUP (ORDER BY ar.artist_name) AS artist_id,
                LISTAGG(DISTINCT ar.artist_name, ', ') WITHIN GROUP (ORDER BY ar.artist_name) AS artist_name
            FROM songs s
            JOIN artist_roles role ON s.song_id = role.song_id
            JOIN artists ar ON role.artist_id = ar.artist_id
            WHERE role.role_id = (SELECT role_id FROM role_code WHERE role_name = '가수')
            GROUP BY s.song_id
        )
        SELECT
            s.song_id,
            al.album_id,
            al.album_image,
            al.album_release_date,
            s.title,
            ua.artist_id AS artist_id,
            ua.artist_name AS artist_name,
            al.album_name,
            COUNT(l.song_id) AS likes,
            s.song_path,
            s.video_link
        FROM songs s
        JOIN albums al ON s.album_id = al.album_id
        JOIN unique_artists ua ON s.song_id = ua.song_id
        LEFT JOIN likes l ON s.song_id = l.song_id
        GROUP BY
            s.song_id,
            al.album_id,
            al.album_image,
            al.album_release_date,
            s.title,
            ua.artist_id,
            ua.artist_name,
            al.album_name,
            s.song_path,
            s.video_link
        order by al.album_release_date desc
    </select>
    
    <!-- 페이지와 페이지 크기를 이용해 노래 목록을 가져오는 쿼리 -->
    <select id="findSongs" resultType="SongChartDto">
         SELECT * FROM (
            SELECT a.*, ROW_NUMBER() OVER (ORDER BY a.song_Id) AS rn 
            FROM songs a
        ) WHERE rn BETWEEN #{offset} AND #{end}
    </select>
    
      
</mapper>


