<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itwill.rest.repository.AlbumDao">

    <!-- album 테이블 전체 검색. 목록 보기. -->
    <select id="selectAllByAlbumId" resultType="Album">
        SELECT * FROM albums ORDER BY album_id DESC
    </select>


    <!-- 최신 날짜 순으로 정렬. -->
    <select id="selectOrderByDate" resultType="Album">
        SELECT 
            a.album_id, 
            a.album_type, 
            a.album_name, 
            a.album_release_date, 
            a.album_image,
            LISTAGG(DISTINCT s.song_id, ', ') WITHIN GROUP (ORDER BY s.song_id) AS song_id,
            LISTAGG(DISTINCT s.title, ', ') WITHIN GROUP (ORDER BY s.title) AS title,
            LISTAGG(DISTINCT gc.genre_name, ', ') WITHIN GROUP (ORDER BY gc.genre_name) AS genre_name,
            LISTAGG(DISTINCT art.artist_name, ', ') WITHIN GROUP (ORDER BY art.artist_name) AS artist_name,
            LISTAGG(DISTINCT art.artist_id, ', ') WITHIN GROUP (ORDER BY art.artist_name) AS artist_id,
            COUNT(DISTINCT al.id) AS likes_count
            
        FROM 
            albums a
            JOIN songs s ON a.album_id = s.album_id
            JOIN title_songs ts ON ts.album_id = a.album_id
            JOIN song_genre sg ON s.song_id = sg.song_id
            JOIN genre_code gc ON sg.genre_id = gc.genre_id
            JOIN artist_roles artr ON s.song_id = artr.song_id
            JOIN artists art ON artr.artist_id = art.artist_id
            JOIN role_code rc ON artr.role_id = rc.role_id
            LEFT JOIN (
                SELECT DISTINCT album_id, id
                FROM album_likes
            ) al ON a.album_id = al.album_id
        
        WHERE 
            rc.role_id = 10
        GROUP BY 
            a.album_id, 
            a.album_type, 
            a.album_name, 
            a.album_release_date, 
            a.album_image
        
        ORDER BY 
            a.album_release_date DESC
    </select>


    <!-- 좋아요 높은 순으로 정렬. join 사용 -->
    <select id="selectOrderByLikes" resultType="Album">
        SELECT
            a.album_id, 
            a.album_type, 
            a.album_name, 
            a.album_release_date, 
            a.album_image,
            LISTAGG(DISTINCT s.song_id, ', ') WITHIN GROUP (ORDER BY s.song_id) AS song_id,
            LISTAGG(DISTINCT s.title, ', ') WITHIN GROUP (ORDER BY s.title) AS title,
            LISTAGG(DISTINCT gc.genre_name, ', ') WITHIN GROUP (ORDER BY gc.genre_name) AS genre_name,
            LISTAGG(DISTINCT art.artist_name, ', ') WITHIN GROUP (ORDER BY art.artist_name) AS artist_name,
            LISTAGG(DISTINCT art.artist_id, ', ') WITHIN GROUP (ORDER BY art.artist_name) AS artist_id,
            COUNT(DISTINCT al.id) as likes_count
            
        FROM 
            albums a
            JOIN songs s ON a.album_id = s.album_id
            JOIN title_songs ts ON ts.song_id = s.song_id
            JOIN song_genre sg ON s.song_id = sg.song_id
            JOIN genre_code gc ON sg.genre_id = gc.genre_id
            JOIN artist_roles artr ON s.song_id = artr.song_id
            JOIN artists art ON artr.artist_id = art.artist_id
            JOIN role_code rc ON artr.role_id = rc.role_id
            LEFT JOIN (
                SELECT DISTINCT album_id, id
                FROM album_likes
            ) al ON a.album_id = al.album_id
        
        WHERE 
            rc.role_id = 10
        GROUP BY 
            a.album_id, 
            a.album_type, 
            a.album_name, 
            a.album_release_date, 
            a.album_image
        
        ORDER BY likes_count DESC
        
    <!--
    <select> 태그: MyBatis에서 SQL 쿼리를 정의하는 태그. 
    id="selectOrderByLikes"는 이 쿼리를 나중에 호출할 때 사용할 식별자.
    resultType="Album": 반환되는 결과 타입을 지정. 
    이 예에서는 Album 이라는 클래스나 타입으로 결과가 매핑될 것을 기대함. 
    
    a.album_id, a.album_name, a.album_image, a.album_type, a.album_release_date: albums 테이블에서 선택된 각 컬럼들을 반환함.
    여기서 a는 albums 테이블의 별칭.
    
    COALESCE(SUM(l.like_count), 0) AS total_likes: 각 앨범에 대한 총 좋아요 수를 계산. 
    SUM(l.like_count)가 NULL일 경우 0을 반환하도록 COALESCE 함수를 사용. 
    이 결과는 total_likes라는 별칭으로 반환됩니다.
    
    LEFT JOIN songs s: songs 테이블과 LEFT JOIN을 수행. 
    이는 albums 테이블의 모든 행을 포함하고, 각 앨범에 해당하는 노래들을 songs 테이블에서 가져옵니다. 
    s는 songs 테이블의 별칭입니다.
    ON a.album_id = s.album_id: 조인의 조건을 지정합니다. 
    albums 테이블의 album_id와 songs 테이블의 album_id가 일치하는 행을 결합함.
    -->
    
    
    <!-- 좋아요 -->
    
    
    
    </select>

</mapper>